[tool.poetry]
name = "prfiesta"
version = "0.11.0"
description = "Collect and Analyze Individual Contributor Pull Requests"
authors = ["kiran94"]
license = "MIT"
readme = "README.md"
homepage = "https://pypi.org/project/prfiesta/"
repository = "https://github.com/kiran94/prfiesta"
documentation = "https://github.com/kiran94/prfiesta/blob/main/README.md"
keywords = [ "pull-request", "pull-request-review", "performance-review" ]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Utilities",
    "Topic :: Software Development",
    "Topic :: Software Development :: Version Control :: Git"
]

[tool.poetry.dependencies]
python = "^3.8"
pygithub = "^1.58.1"
click = "^8.1.3"
cloup = "^2.1.0"
pandas = "^2.0.1"
pyarrow = "^11.0.0"
rich = "^13.3.5"
seaborn = "^0.12.2"
matplotlib = "^3.7.1"
natural = "^0.2.0"
urllib3 = "<2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
pytest-github-actions-annotate-failures = "^0.2.0"
jupyterlab = "^3.6.3"
jupyterlab-widgets = "^3.0.7"
jupyter-black = "^0.3.4"
ipywidgets = "^8.0.6"
pre-commit = "^3.3.2"
papermill = "^2.4.0"
ruff = "^0.0.270"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
prfiesta = 'prfiesta.__main__:main'

[tool.ruff]
line-length = 160
target-version = "py38"

# All Rules: https://beta.ruff.rs/docs/rules/
select = [
    "F",     # pyflakes
    "E",     # pycodestyle
    "C90",   # macabe complexity
    "I",     # isort
    "W",     # warning
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    # "SLF", # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    # "PTH", # flake8-use-pathlib
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "PLE",   # error
    "PLR",   # refactor
    "PLW",   # warning
    "NPY",   # numpy-specific-rules
    "RUF",   # ruff-specific-rules
]

ignore = [
    "S101",   # asserts are used in unit tests
    "EM101",  # not a big deal if the error message is duplicated in the traceback
    "ANN101", # ignore missing type annotation on self
    "ANN003", # ignore missing type annotations on **kwargs
    "PLR0913" # ignore for test cases with high level of paramtatization
]

[tool.ruff.flake8-quotes]
inline-quotes = "single"
